[{"D:\\JD\\my-app\\src\\index.js":"1","D:\\JD\\my-app\\src\\reportWebVitals.js":"2","D:\\JD\\my-app\\src\\App.js":"3"},{"size":500,"mtime":1608803430729,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":12975,"mtime":1608907855453,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"sh8dd0",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"D:\\JD\\my-app\\src\\index.js",[],["16","17"],"D:\\JD\\my-app\\src\\reportWebVitals.js",[],"D:\\JD\\my-app\\src\\App.js",["18"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport ListIcon from \"@material-ui/icons/List\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport earth from \"./imgs/earth.svg\";\r\nimport mars from \"./imgs/mars.svg\";\r\nimport venus from \"./imgs/venus.svg\";\r\nimport saturn from \"./imgs/saturn1.svg\";\r\nimport mercury from \"./imgs/mercury.svg\";\r\nimport eris from \"./imgs/eris.svg\";\r\nimport pluto from \"./imgs/pluto.svg\";\r\nimport ceres from \"./imgs/ceres.svg\";\r\nimport haumea from \"./imgs/haumea.svg\";\r\nimport makemake from \"./imgs/makemake.svg\";\r\nimport jupiter from \"./imgs/jupiter.svg\";\r\nimport warning from \"./imgs/warning.svg\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n    minHeight: \"170px\",\r\n    borderRadius: \"25px\",\r\n    paddingRight: \"20px\",\r\n    paddingTop: \"20px\",\r\n    paddingBottom: \"20px\",\r\n    paddingLeft: \"0px\",\r\n    marginLeft: \"10%\",\r\n    overflow: \"hidden\",\r\n  },\r\n  imgStyle: {\r\n    width: \"170px\",\r\n    height: \"170px\",\r\n    marginLeft: \"-50px\",\r\n    marginTop: \"-35px\",\r\n    filter: \"drop-shadow(0 5mm 3mm #CAC8F1)\",\r\n  },\r\n  title: {\r\n    marginLeft: \"1.25rem\",\r\n    marginTop: \"0.5rem\",\r\n    fontSize: \"1.8rem\",\r\n    fontFamily: \"'Langar', cursive\",\r\n    color: \"#000\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      marginLeft: \"1rem\",\r\n      fontSize: \"1.35rem\",\r\n    },\r\n  },\r\n  noData: {\r\n    textAlign: \"center\",\r\n    height: \"90vh\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  footer: {\r\n    minHeight: \"8vh\",\r\n    backgroundColor: \"orange\",\r\n    textAlign: \"center\",\r\n    padding: \"18px\",\r\n  },\r\n}));\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  dir?: string;\r\n  index: any;\r\n  value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={5}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    \"aria-controls\": `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nexport default function App() {\r\n  const classes = useStyles();\r\n  const [planets, setPlanets] = useState([]);\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleFavourite = (index, fav, name) => (event) => {\r\n    let newItem = { id: index, isFavourite: !fav, name: name };\r\n    setPlanets(planets.map((item) => (item.id === index ? newItem : item)));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(\r\n        \"https://assignment-machstatz.herokuapp.com/planet\"\r\n      );\r\n\r\n      setPlanets(result.data);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const logo = (src, id) => {\r\n    if (src === \"mercury\") {\r\n      return (\r\n        <img\r\n          key={id}\r\n          src={mercury}\r\n          alt={planets.id}\r\n          className={classes.imgStyle}\r\n        />\r\n      );\r\n    } else if (src === \"mars\") {\r\n      return (\r\n        <img\r\n          key={id}\r\n          src={mars}\r\n          alt={planets.id}\r\n          className={classes.imgStyle}\r\n        />\r\n      );\r\n    } else if (src === \"venus\") {\r\n      return (\r\n        <img\r\n          key={id}\r\n          src={venus}\r\n          alt={planets.id}\r\n          className={classes.imgStyle}\r\n        />\r\n      );\r\n    } else if (src === \"earth\") {\r\n      return (\r\n        <img\r\n          key={id}\r\n          src={earth}\r\n          alt={planets.id}\r\n          className={classes.imgStyle}\r\n        />\r\n      );\r\n    } else if (src === \"ceres\") {\r\n      return (\r\n        <img\r\n          key={id}\r\n          src={ceres}\r\n          alt={planets.id}\r\n          className={classes.imgStyle}\r\n        />\r\n      );\r\n    } else if (src === \"jupiter\") {\r\n      return (\r\n        <img\r\n          key={id}\r\n          src={jupiter}\r\n          alt={planets.id}\r\n          className={classes.imgStyle}\r\n        />\r\n      );\r\n    } else if (src === \"saturn\") {\r\n      return (\r\n        <img\r\n          key={id}\r\n          src={saturn}\r\n          alt={planets.id}\r\n          className={classes.imgStyle}\r\n        />\r\n      );\r\n    } else if (src === \"pluto\") {\r\n      return (\r\n        <img\r\n          key={id}\r\n          src={pluto}\r\n          alt={planets.id}\r\n          className={classes.imgStyle}\r\n        />\r\n      );\r\n    } else if (src === \"haumea\") {\r\n      return (\r\n        <img\r\n          key={id}\r\n          src={haumea}\r\n          alt={planets.id}\r\n          className={classes.imgStyle}\r\n        />\r\n      );\r\n    } else if (src === \"makemake\") {\r\n      return (\r\n        <img\r\n          key={id}\r\n          src={makemake}\r\n          alt={planets.id}\r\n          className={classes.imgStyle}\r\n        />\r\n      );\r\n    } else if (src === \"eris\") {\r\n      return (\r\n        <img\r\n          key={id}\r\n          src={eris}\r\n          alt={planets.id}\r\n          className={classes.imgStyle}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  const found = () => {\r\n    for (var i = 0; i < planets.length; i++) {\r\n      if (planets[i].isFavourite === true) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"secondary\"\r\n          textColor=\"secondary\"\r\n          aria-label=\"icon label tabs example\"\r\n          centered\r\n        >\r\n          <Tab icon={<ListIcon />} label=\"LIST\" {...a11yProps(0)} />\r\n          <Tab icon={<FavoriteIcon />} label=\"FAVORITES\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n\r\n      <TabPanel value={value} index={0}>\r\n        <div className={classes.root}>\r\n          <Grid container spacing={5} alignItems=\"center\">\r\n            {planets.map((planet) => (\r\n              <Grid key={planet.id} item xs={12} sm={6} md={4} lg={4} xl={3}>\r\n                <Paper className={classes.paper} elevation={2}>\r\n                  <Box display=\"flex\" flexDirection=\"row\">\r\n                    <Box display=\"flex\">{logo(planet.id)}</Box>\r\n                    <Box display=\"flex\" flexDirection=\"column\">\r\n                      <Box display=\"flex\" flexwrap=\"wrap\">\r\n                        <Typography variant=\"p\" className={classes.title}>\r\n                          {planet.name}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box\r\n                        display=\"flex\"\r\n                        flexwrap=\"wrap\"\r\n                        alignItems=\"flex-end\"\r\n                        style={{ height: \"100%\" }}\r\n                      >\r\n                        <Box>\r\n                          <Typography\r\n                            variant=\"p\"\r\n                            style={{\r\n                              marginLeft: \"1rem\",\r\n                              fontSize: \"0.9rem\",\r\n                              fontWeight: \"600\",\r\n                              fontFamily: \"'Nova Flat', cursive\",\r\n                            }}\r\n                          >\r\n                            Add to Favourites\r\n                          </Typography>\r\n                        </Box>\r\n                        <Box>\r\n                          <Switch\r\n                            key={planets.id}\r\n                            checked={planet.isFavourite}\r\n                            onChange={handleFavourite(\r\n                              planet.id,\r\n                              planet.isFavourite,\r\n                              planet.name\r\n                            )}\r\n                            inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n                          />\r\n                        </Box>\r\n                      </Box>\r\n                    </Box>\r\n                  </Box>\r\n                </Paper>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        {found() === true ? (\r\n          <Grid container spacing={3}>\r\n            {planets.map((planet) => {\r\n              if (planet.isFavourite === true)\r\n                return (\r\n                  <Grid\r\n                    key={planet.id}\r\n                    item\r\n                    xs={12}\r\n                    sm={6}\r\n                    md={4}\r\n                    lg={4}\r\n                    xl={3}\r\n                  >\r\n                    <Paper className={classes.paper} elevation={2}>\r\n                      <Box display=\"flex\" flexDirection=\"row\">\r\n                        <Box display=\"flex\">{logo(planet.id)}</Box>\r\n                        <Box display=\"flex\" flexDirection=\"column\">\r\n                          <Box display=\"flex\" flexwrap=\"wrap\">\r\n                            <Typography variant=\"p\" className={classes.title}>\r\n                              {planet.name}\r\n                            </Typography>\r\n                          </Box>\r\n                          <Box\r\n                            display=\"flex\"\r\n                            flexwrap=\"wrap\"\r\n                            alignItems=\"flex-end\"\r\n                            style={{ height: \"100%\" }}\r\n                          >\r\n                            <Box>\r\n                              <Typography\r\n                                variant=\"p\"\r\n                                style={{\r\n                                  marginLeft: \"1rem\",\r\n                                  fontSize: \"0.9rem\",\r\n                                  fontWeight: \"600\",\r\n                                  fontFamily: \"'Nova Flat', cursive\",\r\n                                }}\r\n                              >\r\n                                Add to Favourites\r\n                              </Typography>\r\n                            </Box>\r\n                            <Box>\r\n                              <Switch\r\n                                key={planets.id}\r\n                                checked={planet.isFavourite}\r\n                                onChange={handleFavourite(\r\n                                  planet.id,\r\n                                  planet.isFavourite,\r\n                                  planet.name\r\n                                )}\r\n                                inputProps={{\r\n                                  \"aria-label\": \"secondary checkbox\",\r\n                                }}\r\n                              />\r\n                            </Box>\r\n                          </Box>\r\n                        </Box>\r\n                      </Box>\r\n                    </Paper>\r\n                  </Grid>\r\n                );\r\n            })}\r\n          </Grid>\r\n        ) : (\r\n          <div className={classes.noData}>\r\n            <Box display=\"flex\" flexDirection=\"column\">\r\n              <Box display=\"flex\">\r\n                <img\r\n                  src={warning}\r\n                  style={{ width: \"200px\", margin: \"0 auto\" }}\r\n                  alt=\"warning\"\r\n                />\r\n              </Box>\r\n              <Box>\r\n                <Typography\r\n                  variant=\"p\"\r\n                  style={{\r\n                    paddingTop: \"15px\",\r\n                    fontSize: \"1.8rem\",\r\n                    fontWeight: \"600\",\r\n                    fontFamily: \"'Nova Flat', cursive\",\r\n                    color: \"#000\",\r\n                  }}\r\n                >\r\n                  No Favourite Selected\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </div>\r\n        )}\r\n      </TabPanel>\r\n\r\n      <div className={classes.footer}>\r\n        <Typography\r\n          variant=\"p\"\r\n          style={{\r\n            textAlign: \"center\",\r\n            fontSize: \"1.5rem\",\r\n            fontWeight: \"600\",\r\n            fontFamily: \"'Nova Flat', cursive\",\r\n            color: \"white\",\r\n          }}\r\n        >\r\n          Made by\r\n          <Link href=\"https://jaydeepdave.me\" rel=\"noopener\" target=\"_blank\">\r\n            &nbsp;Jaydeep Dave&nbsp;❤️\r\n          </Link>\r\n        </Typography>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":323,"column":35,"nodeType":"25","messageId":"26","endLine":323,"endColumn":37},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]